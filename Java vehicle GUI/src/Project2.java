/*
 * File: Project2.java
 * Author: Linden Crandall
 * Purpose: Create a gui and display report of details
 * for various cars i.e. sales tax, weight, make and model and type
 */
import javax.swing.*;
import java.awt.event.*;
import java.text.DecimalFormat;
import java.awt.*;

public class Project2 extends JFrame {
	DecimalFormat df = new DecimalFormat( "$###,###.00" );
	
	//Array of type Automobile
	Automobile [] autoArray = new Automobile[5];
	private static int counter = 0;

	JPanel masterPanel, panel1, panel2, panel3;
	JLabel makeModelLabel, salesPriceLabel, autoTypeLabel, mpgLabel, weightPoundsLabel;
	JTextField makeModelTxtField, priceTxtField, mpgTxtField, weightTxtField, showTaxTxtField;
	JButton salesTaxButton, clearFieldsButton, displayReportButton;
	JRadioButton hybridRButton, electricRButton, otherRButton;

	// instance variables
	String carMakeAndModelString;
	int carCostInt, mpgInt, carWeightInt;

	public Project2() {
		// all panels will be added to masterPanel
		masterPanel = new JPanel();

		
		
		
		
		/*************** panel1 ***************************/
		// first panel1 with labels makeAndModel and salesPrice
		// and TextFields makeModel and salesPrice in North BorderLayout
		panel1 = new JPanel(new GridLayout(2, 2));
		makeModelLabel = new JLabel("Make and Model");
		makeModelTxtField = new JTextField(12);
		panel1.add(makeModelLabel);
		panel1.add(makeModelTxtField);
		salesPriceLabel = new JLabel("Sales Price");
		priceTxtField = new JTextField(12);
		panel1.add(salesPriceLabel);
		panel1.add(priceTxtField);

		
		
		
		
		
		
		/*************** panel2 ***************************/
		// second panel2 with JRadioButtons hybrid, electric, other
		// JLabels autoType, mpg, weightPounds
		// and JTextField milesPerGallon and weightPounds
		panel2 = new JPanel();
		panel2.setBorder(BorderFactory.createTitledBorder("Automobile"));
		// sub-panel for panel2 for JRadioButtons
		JPanel radioPanel = new JPanel(new GridLayout(4, 0));
		autoTypeLabel = new JLabel("Automobile Type");
		hybridRButton = new JRadioButton("Hybrid");
		electricRButton = new JRadioButton("Electric");
		otherRButton = new JRadioButton("Other");
		
		//only one JRadioButton can be chosen at any given time
		ButtonGroup group = new ButtonGroup();
		group.add(hybridRButton);
		group.add(electricRButton);
		group.add(otherRButton);
		radioPanel.add(autoTypeLabel);
		radioPanel.add(hybridRButton);
		radioPanel.add(electricRButton);
		radioPanel.add(otherRButton);
		
		// sub-panel for panel2 for JLabels and JTextFields
		JPanel labelTextPanel = new JPanel(new GridLayout(2, 2));
		mpgLabel = new JLabel("Miles per Gallon");
		mpgTxtField = new JTextField(10);
		weightPoundsLabel = new JLabel("Weight in Pounds");
		weightTxtField = new JTextField(10);
		labelTextPanel.add(mpgLabel);
		labelTextPanel.add(mpgTxtField);
		labelTextPanel.add(weightPoundsLabel);
		labelTextPanel.add(weightTxtField);

		// add sub-panels to panel2
		panel2.add(radioPanel);
		panel2.add(labelTextPanel);

		
		
		
		
		
		/*************** panel3 *************************/
		// third panel3 with JButtons salesTax, clearFields, displayReport
		// and uneditable JTextField result that diplays report
		panel3 = new JPanel(new GridLayout(2, 2, 6, 6));
		salesTaxButton = new JButton("Compute Sales Tax");
		salesTaxButton.setToolTipText("Computes sales tax for current vehicle and saves the information for up to five vehicles");
		showTaxTxtField = new JTextField(10);
		showTaxTxtField.setEditable(false);
		clearFieldsButton = new JButton("Clear Fields");
		clearFieldsButton.setToolTipText("Clears all fields");
		displayReportButton = new JButton("Display Report");
		displayReportButton.setToolTipText("Displays up to five of the most recent vehicle entries generated by the Compute Sales Tax button on console");
		panel3.add(salesTaxButton);
		panel3.add(showTaxTxtField);
		panel3.add(clearFieldsButton);
		panel3.add(displayReportButton);

		// add panels to masterPanel
		masterPanel.add(BorderLayout.NORTH, panel1);
		masterPanel.add(BorderLayout.CENTER, panel2);
		masterPanel.add(BorderLayout.PAGE_END, panel3);

		// add MasterPanel to JFrame to be displayed
		add(masterPanel);

		
		
		
		/****************** Register listeners ***********************/
		// JButtons salesTax, clearFields, displayReport
		salesTaxButton.addActionListener(new ComputeSalesTax());
		clearFieldsButton.addActionListener(new Clear());
		displayReportButton.addActionListener(new DisplayReport());
	}

	
	
	
	/******************** Nested Classes ********************************/

	// JButtons
	//displayReport displays array on console
	class DisplayReport implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {
			for (int i = 0; i <counter; i ++) {
				System.out.println(autoArray[i]);
				}
			}
		}
	
	// salesTax
	class ComputeSalesTax implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {
			try {
				if (hybridRButton.isSelected()) {
					
					String p = priceTxtField.getText();
					carCostInt = Integer.parseInt(p);
					
					if(carCostInt <= 0) {
						throw new NumberFormatException();
					} else {
					String m = mpgTxtField.getText();
					mpgInt = Integer.parseInt(m);
					carMakeAndModelString = makeModelTxtField.getText();
					Hybrid hy = new Hybrid(carMakeAndModelString, carCostInt, mpgInt);
					showTaxTxtField.setText("" + df.format(hy.salesTax(carCostInt)));
					
					//ADD OBJECT TO ARRAY AND INCREMENT COUNTER
					autoArray[counter] = new Hybrid(carMakeAndModelString, carCostInt, mpgInt);
					counter++;
					}
				}

				if (electricRButton.isSelected()) {
					String p = priceTxtField.getText();
					carCostInt = Integer.parseInt(p);
					
					if(carCostInt <= 0) {
						throw new NumberFormatException();
					} else {
					
					carMakeAndModelString = makeModelTxtField.getText();
					String w = weightTxtField.getText();
					carWeightInt = Integer.parseInt(w);
					Electric elect = new Electric(carMakeAndModelString, carCostInt, carWeightInt);
					showTaxTxtField.setText("" + df.format(elect.salesTax(carCostInt)));
					
					//ADD OBJECT TO ARRAY AND INCREMENT COUNTER
					autoArray[counter] = new Electric(carMakeAndModelString, carCostInt, carWeightInt);
					counter++;
					}
				}

				if (otherRButton.isSelected()) {
					String p = priceTxtField.getText();
					carCostInt = Integer.parseInt(p);
					if(carCostInt <= 0) {
						throw new NumberFormatException();
					} else {
					carMakeAndModelString = makeModelTxtField.getText();
					Automobile auto = new Automobile(carMakeAndModelString, carCostInt);
					showTaxTxtField.setText("" + df.format(auto.salesTax(carCostInt)));
					
					//ADD OBJECT TO ARRAY AND INCREMENT COUNTER
					autoArray[counter] = new Automobile(carMakeAndModelString, carCostInt);
					counter++;
				}
			}

				} catch (NumberFormatException nfe) {
					JOptionPane.showMessageDialog(showTaxTxtField, "Please enter valid info (i.e. whole number for car price, weight when "
							+ "Electric is selected, and miles per gallon when Hybrid is selected.)", "Input Error",JOptionPane.ERROR_MESSAGE);
			}
			
			try {
				if (makeModelTxtField.getText().equals("")) {
					throw new IllegalArgumentException();
				}
			} catch (IllegalArgumentException iae) {
				JOptionPane.showMessageDialog(showTaxTxtField, "Pease enter car make and model", "Input Error",JOptionPane.ERROR_MESSAGE);
			}
		}
	}

	// clearFields
	class Clear implements ActionListener {
		@Override
		public void actionPerformed(ActionEvent e) {
			makeModelTxtField.setText("");
			priceTxtField.setText("");
			mpgTxtField.setText("");
			weightTxtField.setText("");
			showTaxTxtField.setText("");
		}
	}
	/******************** Main Method *****************/
	public static void main(String[] args) {
		Project2 p2 = new Project2();
		p2.setTitle("Automobile Sales Tax Calculator");
		p2.setSize(400, 275);
		p2.setResizable(false);
		p2.setLocationRelativeTo(null);
		p2.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		p2.setVisible(true);

	}
}
